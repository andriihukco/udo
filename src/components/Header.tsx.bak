"use client";

import React, { useState, useEffect } from "react";
import Link from "next/link";
import Image from "next/image";
import { usePathname } from "next/navigation";
import {
  User as UserIcon,
  Settings,
  ShoppingBag,
  Menu,
  Heart,
  Phone,
  Mail,
  Home,
  Package,
  Printer,
  ChevronRight,
  Sparkles,
  LogOut,
  DollarSign,
  Euro,
  CreditCard,
  Users,
  LayoutDashboard,
  X,
  Shirt,
  Images,
  BadgeInfo,
  MessageCircleHeart,
  Search,
  Loader2,
  ArrowUpRight,
  ArrowRight,
} from "lucide-react";
import { Button } from "@/components/ui/button";
import { CartButton } from "@/components/ui/cart-button";
import { cn } from "@/lib/utils";
import { useLocale } from "@/contexts/LocaleContext";
import { SimplifiedAuthModal } from "@/components/ui/simplified-auth-modal";
import { Icon } from "@/components/ui/icon";
import {
  Sheet,
  SheetContent,
  SheetTrigger,
  SheetClose,
} from "@/components/ui/sheet";
import { Badge } from "@/components/ui/badge";
import { Locale } from "@/translations";
import { TypographyH2 } from "@/components/ui/typography";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
} from "@/components/ui/select";
import { useUser } from "@/contexts/UserContext";
import { Input } from "@/components/ui/input";

type Currency = "USD" | "EUR" | "UAH";

export default function Header() {
  const pathname = usePathname();
  const { t, locale, setLocale } = useLocale();
  const { user, isAuthenticated, logoutUser, checkUserExists } = useUser();
  const [showAuthModal, setShowAuthModal] = useState(false);
  const [mounted, setMounted] = useState(false);
  const [currency, setCurrency] = useState<Currency>("USD");
  const [headerEmail, setHeaderEmail] = useState("");
  const [isLoading, setIsLoading] = useState(false);

  const isAdmin = user?.role === "admin" || user?.role === "superadmin";

  // After mounting, we can access localStorage
  useEffect(() => {
    setMounted(true);

    // Load saved currency preference
    const savedCurrency = localStorage.getItem("currency") as Currency;
    if (savedCurrency && ["USD", "EUR", "UAH"].includes(savedCurrency)) {
      setCurrency(savedCurrency);
    }
  }, []);

  // Save currency preference when it changes
  useEffect(() => {
    if (mounted) {
      localStorage.setItem("currency", currency);
    }
  }, [currency, mounted]);

  const isActive = (path: string) => {
    return pathname === path;
  };

  // Navigation items with icons - different for admin and regular users
  const navItems = isAdmin
    ? [
        { href: "/admin", icon: LayoutDashboard, label: "Dashboard" },
        { href: "/admin/products", icon: Package, label: "Products" },
        { href: "/admin/prints", icon: Printer, label: "Prints" },
        { href: "/admin/users", icon: Users, label: "Users" },
        { href: "/admin/settings", icon: Settings, label: "Settings" },
      ]
    : [
        { href: "/", icon: Home, label: "–ì–æ–ª–æ–≤–Ω–∞" },
        { href: "/products", icon: Shirt, label: "–û–¥—è–≥ —Ç–∞ –∞–∫—Å–µ—Å—É–∞—Ä–∏" },
        {
          href: "/prints",
          icon: (props: React.SVGProps<SVGSVGElement>) => (
            <Images {...props} strokeWidth={1.25} />
          ),
          label: "–ö–∞—Å—Ç–æ–º—ñ–∑–∞—Ü—ñ—è",
        },
        { href: "/about", icon: BadgeInfo, label: "–ü—Ä–æ –Ω–∞—Å" },
        {
          href: "/contact",
          icon: (props: React.SVGProps<SVGSVGElement>) => (
            <MessageCircleHeart {...props} strokeWidth={1.25} />
          ),
          label: "–ö–æ–Ω—Ç–∞–∫—Ç–∏",
        },
      ];

  // Mock locations data
  const locations = [
    {
      name: "Lviv Office",
      address: "–≤—É–ª. –®–µ–≤—á–µ–Ω–∫–∞ 123, –õ—å–≤—ñ–≤, 79000",
      phone: "+380 32 123 4567",
      icon: "/images/svg/lviv.svg",
    },
    {
      name: "Zaporizhia Production",
      address: "–≤—É–ª. –ü–µ—Ä–µ–º–æ–≥–∏ 45, –ó–∞–ø–æ—Ä—ñ–∂–∂—è, 69000",
      phone: "+380 61 765 4321",
      icon: "/images/svg/zaporizhia.svg",
    },
  ];

  // Language options with emojis
  const languages = [
    { code: "uk" as Locale, name: "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", emoji: "üá∫üá¶" },
    { code: "en" as Locale, name: "English", emoji: "üá¨üáß" },
    { code: "pl" as Locale, name: "Polski", emoji: "üáµüá±" },
  ];

  // Currency options with symbols
  const currencies = [
    {
      code: "USD" as Currency,
      name: t("currency.usd"),
      symbol: "$",
      icon: DollarSign,
    },
    {
      code: "EUR" as Currency,
      name: t("currency.eur"),
      symbol: "‚Ç¨",
      icon: Euro,
    },
    {
      code: "UAH" as Currency,
      name: t("currency.uah"),
      symbol: "‚Ç¥",
      icon: CreditCard,
    },
  ];

  // Handle language change
  const handleLanguageChange = (newLocale: Locale) => {
    setLocale(newLocale);
  };

  // Handle currency change
  const handleCurrencyChange = (newCurrency: Currency) => {
    setCurrency(newCurrency);
  };

  // Handle continue button click in the welcome banner
  const handleContinueClick = async () => {
    if (headerEmail && /\S+@\S+\.\S+/.test(headerEmail)) {
      // Check if user exists before opening modal
      setIsLoading(true);
      try {
        await checkUserExists(headerEmail);
        setShowAuthModal(true);
      } catch (err) {
        console.error("Error checking user:", err);
      } finally {
        setIsLoading(false);
      }
    } else {
      // Show validation error or focus the input
      const emailInput = document.getElementById(
        "header-email"
      ) as HTMLInputElement;
      if (emailInput) {
        emailInput.focus();
        emailInput.classList.add("border-red-500");
        setTimeout(() => {
          emailInput.classList.remove("border-red-500");
        }, 2000);
      }
    }
  };

  // Social media links
  const socialLinks = [
    {
      icon: () => (
        <Image
          src="/instagram.svg"
          alt="Instagram"
          width={24}
          height={24}
          className="w-full h-full group-hover:scale-110 transition-transform"
        />
      ),
      href: "https://instagram.com/u_do.shop",
      label: "Instagram",
    },
    {
      icon: () => (
        <Image
          src="/tiktok.svg"
          alt="TikTok"
          width={24}
          height={24}
          className="w-full h-full group-hover:scale-110 transition-transform"
        />
      ),
      href: "https://tiktok.com/@u_do.shop",
      label: "TikTok",
    },
    {
      icon: () => (
        <Image
          src="/telegram.svg"
          alt="Telegram"
          width={24}
          height={24}
          className="w-full h-full group-hover:scale-110 transition-transform"
        />
      ),
      href: "https://t.me/udo_shop",
      label: "Telegram",
    },
  ];

  return (
    <header className="bg-background border-b border-border sticky top-0 z-40">
      <div className="container mx-auto px-4 py-3">
        <div className="flex justify-between items-center">
          <div className="flex items-center">
            {/* Logo with Admin Badge */}
            <div className="flex items-center mr-4">
              <Link
                href={isAdmin ? "/admin" : "/"}
                className="relative h-10 flex items-center"
              >
                <Image
                  src="/logo.svg"
                  alt={t("common.siteName")}
                  width={120}
                  height={40}
                  priority
                />
              </Link>
              {isAdmin && (
                <Badge
                  variant="outline"
                  className="ml-2 bg-primary/10 border-primary/20"
                >
                  {user?.role === "superadmin" ? "Super Admin" : "Admin"}
                </Badge>
              )}
            </div>

            {/* Desktop Navigation */}
            <div className="hidden md:flex items-center space-x-1">
              {navItems.slice(1).map((item) => (
                <Link
                  key={item.href}
                  href={item.href}
                  className={cn(
                    "px-3 py-2 rounded-full text-sm transition-colors hover:bg-accent group flex items-center",
                    isActive(item.href)
                      ? "font-medium text-foreground"
                      : "text-muted-foreground"
                  )}
                >
                  <Icon
                    icon={item.icon}
                    size="menu"
                    className="mr-2 text-primary group-hover:scale-110 transition-transform"
                  />
                  <span
                    className={cn(
                      "group-hover:underline",
                      isActive(item.href) ? "underline" : ""
                    )}
                  >
                    {item.label}
                  </span>
                </Link>
              ))}
            </div>
          </div>

          {/* Desktop Action Buttons */}
          <div className="flex items-center space-x-2">
            {/* Builder Button - Only show for non-admin users and on non-mobile screens */}
            {(!isAdmin || user?.role === "user") && (
              <div className="hidden md:block">
                <Button
                  variant="glowing"
                  showGlow={true}
                  className="rounded-full px-4 py-2 font-medium bg-gradient-to-r from-primary to-primary/80 hover:from-primary/90 hover:to-primary/70 text-primary-foreground shadow-md hover:shadow-lg transition-all"
                >
                  <Link href="/editor" className="flex items-center">
                    <Icon
                      icon={Sparkles}
                      size="default"
                      className="mr-2 animate-pulse"
                    />
                    <span className="relative">
                      {t("common.openBuilder")}
                      <span className="absolute -top-1 -right-1 flex h-2 w-2">
                        <span className="animate-ping absolute inline-flex h-full w-full rounded-full bg-primary-foreground opacity-75"></span>
                        <span className="relative inline-flex rounded-full h-2 w-2 bg-primary-foreground"></span>
                      </span>
                    </span>
                  </Link>
                </Button>
              </div>
            )}

            {/* Search Button */}
            <Button
              variant="ghost"
              size="icon"
              className="rounded-full"
              onClick={() => {
                // Implement search functionality
                console.log("Search clicked");
              }}
            >
              <Icon icon={Search} size="default" />
              <span className="sr-only">Search</span>
            </Button>

            {/* Cart Button - Only show for regular users */}
            {(!isAdmin || user?.role === "user") && <CartButton />}

            {/* Auth Modal */}
            <SimplifiedAuthModal
              isOpen={showAuthModal}
              onClose={() => setShowAuthModal(false)}
              initialEmail={headerEmail}
            />

            {/* User Profile Menu */}
            <Sheet>
              <SheetTrigger asChild>
                <Button variant="ghost" size="icon" className="rounded-full">
                  <Icon icon={Menu} size="default" />
                  <span className="sr-only">{t("common.menu")}</span>
                </Button>
              </SheetTrigger>
              <SheetContent
                side="right"
                className="w-full sm:max-w-md overflow-y-auto p-0"
              >
                <div className="flex flex-col h-full">
                  {/* Sheet Header */}
                  <div className="flex items-center justify-between py-3 px-4 border-b">
                    <div className="flex items-center">
                      <TypographyH2 className="text-lg">
                        {t("common.menu")}
                      </TypographyH2>
                    </div>
                    <SheetClose asChild>
                      <Button
                        variant="ghost"
                        size="icon"
                        className="rounded-full"
                      >
                        <Icon icon={X} size="default" />
                        <span className="sr-only">Close</span>
                      </Button>
                    </SheetClose>
                  </div>

                  {/* Main Content Area - Scrollable */}
                  <div className="flex-1 overflow-y-auto">
                    {/* User Profile Banner Section */}
                    <div className="p-0">
                      {isAuthenticated && user ? (
                        <div className="bg-gradient-to-r from-primary/20 to-primary/10 rounded-xl shadow-sm p-4 mx-6 mt-6">
                          <div className="flex items-center space-x-4 mb-3">
                            <div className="bg-primary text-primary-foreground rounded-full w-12 h-12 flex items-center justify-center shadow-md">
                              <UserIcon className="h-6 w-6" />
                            </div>
                            <div>
                              <p className="font-medium text-lg">{user.name}</p>
                              <p className="text-sm text-muted-foreground">
                                {user.email}
                              </p>
                              {user.role && user.role !== "user" && (
                                <Badge
                                  variant="outline"
                                  className="mt-1 bg-primary/10 border-primary/20"
                                >
                                  {user.role === "superadmin"
                                    ? "Super Admin"
                                    : "Admin"}
                                </Badge>
                              )}
                            </div>
                          </div>
                          <div className="flex space-x-2">
                            <SheetClose asChild>
                              <Button
                                variant="outline"
                                size="sm"
                                className="flex-1"
                                onClick={() => {}}
                              >
                                <Settings className="h-4 w-4 mr-2" />
                                {t("user.manageAccount")}
                              </Button>
                            </SheetClose>
                            <Button
                              variant="outline"
                              size="sm"
                              className="flex-1 text-rose-500 hover:text-rose-600 border-rose-200 hover:border-rose-300 hover:bg-rose-50"
                              onClick={logoutUser}
                            >
                              <LogOut className="h-4 w-4 mr-2" />
                              {t("user.logout")}
                            </Button>
                          </div>
                        </div>
                      ) : (
                        <div className="bg-gradient-to-r from-primary/20 to-primary/10 p-6">
                          <div className="flex items-center gap-4 mb-3">
                            <div className="flex-shrink-0">
                              <Image
                                src="/welcome.svg"
                                alt="Welcome"
                                width={100}
                                height={100}
                                className="rounded-full"
                              />
                            </div>
                            <div>
                              <h3 className="font-medium text-lg">
                                {t("auth.welcomeGuest")}
                              </h3>
                              <p className="text-sm text-muted-foreground">
                                –í –æ—Å–æ–±–∏—Å—Ç–æ–º—É –∫–∞–±—ñ–Ω–µ—Ç—ñ —Ç–∏ –º–æ–∂–µ—à –≤—ñ–¥—Å–ª—ñ–¥–∫–æ–≤—É–≤–∞—Ç–∏
                                –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Ç–∞ –¥–æ–¥–∞–≤–∞—Ç–∏ –¥–æ –≤–ø–æ–¥–æ–±–∞–Ω–æ–≥–æ –Ω–∞—à—ñ
                                —Ç–æ–≤–∞—Ä–∏
                              </p>
                            </div>
                          </div>
                          <div className="space-y-3">
                            <div className="flex gap-2">
                              <Input
                                id="header-email"
                                type="email"
                                placeholder="your.email@example.com"
                                className="bg-background flex-1 focus-visible:ring-primary focus-visible:ring-offset-0"
                                value={headerEmail}
                                onChange={(e) => setHeaderEmail(e.target.value)}
                              />
                              <div
                                className={cn(
                                  "transition-opacity duration-300",
                                  headerEmail &&
                                    /\S+@\S+\.\S+/.test(headerEmail)
                                    ? "opacity-100"
                                    : "opacity-50 pointer-events-none"
                                )}
                              >
                                <SheetClose asChild>
                                  <Button
                                    type="button"
                                    variant="default"
                                    className="h-10 bg-primary text-primary-foreground"
                                    onClick={handleContinueClick}
                                    disabled={isLoading}
                                  >
                                    {isLoading ? (
                                      <Loader2 className="h-4 w-4 animate-spin" />
                                    ) : (
                                      <Icon
                                        icon={ArrowRight}
                                        className="text-primary-foreground"
                                        size="default"
                                      />
                                    )}
                                  </Button>
                                </SheetClose>
                              </div>
                            </div>
                          </div>
                        </div>
                      )}
                    </div>

                    {/* Mobile Builder Button - Only visible on mobile and for non-admin users */}
                    {(!isAdmin || user?.role === "user") && (
                      <div className="md:hidden px-6 py-4 bg-muted/30">
                        <div className="flex gap-2">
                          <SheetClose asChild>
                            <Button
                              variant="glowing"
                              showGlow={true}
                              className="flex-1 bg-gradient-to-r from-primary to-primary/80 hover:from-primary/90 hover:to-primary/70 text-primary-foreground font-medium shadow-md hover:shadow-lg transition-all"
                            >
                              <Link
                                href="/editor"
                                className="flex items-center justify-center w-full"
                              >
                                <Icon
                                  icon={Sparkles}
                                  size="menu"
                                  className="mr-2 animate-pulse"
                                />
                                <span className="relative">
                                  {t("common.openBuilder")}
                                  <span className="absolute -top-1 -right-1 flex h-2 w-2">
                                    <span className="animate-ping absolute inline-flex h-full w-full rounded-full bg-primary-foreground opacity-75"></span>
                                    <span className="relative inline-flex rounded-full h-2 w-2 bg-primary-foreground"></span>
                                  </span>
                                </span>
                              </Link>
                            </Button>
                          </SheetClose>
                        </div>
                      </div>
                    )}

                    {/* Full width divider */}
                    <div className="h-px w-full bg-border"></div>

                    {/* Main Navigation - Mobile Only */}
                    <div className="md:hidden px-6 py-4 bg-accent/10">
                      <h3 className="font-medium text-sm text-muted-foreground uppercase tracking-wider mb-3">
                        {t("menu.navigation")}
                      </h3>
                      <nav className="grid grid-cols-1 gap-1 pl-1 pr-2">
                        {navItems.map((item) => (
                          <SheetClose key={item.href} asChild>
                            <Link
                              href={item.href}
                              className={cn(
                                "flex items-center p-3 rounded-full transition-colors group",
                                isActive(item.href)
                                  ? "bg-accent text-foreground font-medium"
                                  : "hover:bg-accent hover:text-foreground text-muted-foreground"
                              )}
                            >
                              <Icon
                                icon={item.icon}
                                size="menu"
                                className="mr-3 text-primary group-hover:scale-110 transition-transform"
                              />
                              <span className="group-hover:underline">
                                {item.label}
                              </span>
                              {isActive(item.href) && (
                                <div className="ml-auto w-2 h-2 rounded-full bg-primary" />
                              )}
                            </Link>
                          </SheetClose>
                        ))}
                      </nav>
                    </div>

                    {/* Full width divider */}
                    <div className="h-px w-full bg-border"></div>

                    {/* Combined Quick Links and Settings Section - Only for non-admin users */}
                    {(!isAdmin || user?.role === "user") && (
                      <>
                        {/* Quick Links Section */}
                        <div className="px-6 py-4 bg-accent/10">
                          <h3 className="font-medium text-sm text-muted-foreground uppercase tracking-wider mb-3">
                            {t("menu.quickLinks")}
                          </h3>
                          <nav className="grid grid-cols-1 gap-1 pl-1 pr-2">
                            {/* Favorites */}
                            <SheetClose asChild>
                              <Link
                                href="/favorites"
                                className="flex items-center p-3 rounded-full transition-colors group hover:bg-accent hover:text-foreground"
                              >
                                <Icon
                                  icon={Heart}
                                  size="menu"
                                  className="mr-3 text-primary group-hover:scale-110 transition-transform"
                                />
                                <span className="group-hover:underline">
                                  {t("common.favorites")}
                                </span>
                                <div className="ml-auto flex items-center">
                                  <Badge variant="outline" className="mr-2">
                                    0
                                  </Badge>
                                  <ChevronRight className="h-4 w-4 text-muted-foreground" />
                                </div>
                              </Link>
                            </SheetClose>

                            {/* Orders */}
                            <SheetClose asChild>
                              <Link
                                href="/orders"
                                className="flex items-center p-3 rounded-full transition-colors group hover:bg-accent hover:text-foreground text-muted-foreground"
                              >
                                <Icon
                                  icon={ShoppingBag}
                                  size="menu"
                                  className="mr-3 text-primary group-hover:scale-110 transition-transform"
                                />
                                <span className="group-hover:underline">
                                  {t("user.orders")}
                                </span>
                                <ChevronRight className="h-4 w-4 text-muted-foreground ml-auto" />
                              </Link>
                            </SheetClose>

                            {/* Settings - Only show for authenticated users */}
                            {user && (
                              <SheetClose asChild>
                                <Link
                                  href="/settings"
                                  className="flex items-center p-3 rounded-full transition-colors group hover:bg-accent hover:text-foreground text-muted-foreground"
                                >
                                  <Icon
                                    icon={Settings}
                                    size="menu"
                                    className="mr-3 text-primary group-hover:scale-110 transition-transform"
                                  />
                                  <span className="group-hover:underline">
                                    {t("user.settings")}
                                  </span>
                                  <ChevronRight className="h-4 w-4 text-muted-foreground ml-auto" />
                                </Link>
                              </SheetClose>
                            )}
                          </nav>
                        </div>

                        {/* Full width divider */}
                        <div className="h-px w-full bg-border"></div>

                        {/* Social Media Links - Before locations */}
                        <div className="px-6 py-4 bg-accent/10">
                          <h3 className="font-medium text-sm text-muted-foreground uppercase tracking-wider mb-3">
                            {t("menu.followUs")}
                          </h3>
                          <div className="flex gap-2 pl-1 pr-2 mb-4">
                            {socialLinks.map((social) => (
                              <SheetClose key={social.label} asChild>
                                <Link
                                  href={social.href}
                                  className="flex items-center justify-center h-12 w-12 rounded-full border border-border bg-background hover:bg-accent hover:text-foreground transition-colors group overflow-hidden"
                                  target="_blank"
                                  rel="noopener noreferrer"
                                >
                                  <social.icon />
                                  <span className="sr-only">
                                    {social.label}
                                  </span>
                                </Link>
                              </SheetClose>
                            ))}
                          </div>
                        </div>

                        {/* Locations Section - Simplified */}
                        <div className="px-6 py-4 bg-accent/10">
                          <h3 className="font-medium text-sm text-muted-foreground uppercase tracking-wider mb-3">
                            {t("menu.ourLocations")}
                          </h3>
                          <div className="p-0 rounded-lg">
                            <div className="grid grid-cols-1 gap-3 pl-1 pr-2">
                              {locations.map((location, index) => (
                                <div
                                  key={index}
                                  className="flex items-center group hover:bg-accent hover:text-foreground rounded-full transition-colors"
                                >
                                  <div className="w-12 h-12 relative border border-border rounded-full overflow-hidden flex-shrink-0 flex items-center justify-center bg-background mr-3">
                                    <Image
                                      src={location.icon}
                                      alt={location.name}
                                      width={36}
                                      height={36}
                                      className="object-contain"
                                    />
                                  </div>
                                  <div className="flex-1 min-w-0 py-2">
                                    <SheetClose asChild>
                                      <Link
                                        href={`https://www.google.com/maps/search/?api=1&query=${encodeURIComponent(
                                          location.address
                                        )}`}
                                        target="_blank"
                                        rel="noopener noreferrer"
                                      >
                                        <h4 className="font-medium text-base flex items-center group-hover:text-primary transition-colors">
                                          {location.name}
                                          <Icon
                                            icon={ArrowUpRight}
                                            className="ml-1 opacity-0 group-hover:opacity-100 transition-opacity text-primary"
                                            size="default"
                                          />
                                        </h4>
                                        <span className="text-sm text-muted-foreground block">
                                          {location.address}
                                        </span>
                                      </Link>
                                    </SheetClose>
                                  </div>
                                </div>
                              ))}
                            </div>
                          </div>
                        </div>

                        {/* Locations Section - Simplified */}
                        <div className="px-6 py-4 bg-accent/10">
                          <h3 className="font-medium text-sm text-muted-foreground uppercase tracking-wider mb-3">
                            {t("menu.ourLocations")}
                          </h3>
                          <div className="grid grid-cols-1 gap-3 pl-1 pr-2">
                            {locations.map((location, index) => (
                              <SheetClose key={index} asChild>
                                <Link
                                  href={`https://www.google.com/maps/search/?api=1&query=${encodeURIComponent(
                                    location.address
                                  )}`}
                                  target="_blank"
                                  rel="noopener noreferrer"
                                  className="flex items-center p-3 rounded-full transition-colors group hover:bg-accent hover:text-foreground text-muted-foreground"
                                >
                                  <div className="w-10 h-10 relative border border-border rounded-full overflow-hidden flex-shrink-0 flex items-center justify-center bg-background mr-3">
                                    <Image
                                      src={location.icon}
                                      alt={location.name}
                                      width={30}
                                      height={30}
                                      className="object-contain"
                                    />
                                  </div>
                                  <div className="flex-1 min-w-0">
                                    <h4 className="font-medium text-base group-hover:underline">
                                      {location.name}
                                    </h4>
                                    <span className="text-xs text-muted-foreground block">
                                      {location.address}
                                    </span>
                                  </div>
                                  <Icon
                                    icon={ArrowUpRight}
                                    className="ml-auto text-muted-foreground group-hover:text-foreground"
                                    size="default"
                                  />
                                </Link>
                              </SheetClose>
                            ))}
                          </div>
                        </div>

                        {/* Full width divider */}
                        <div className="h-px w-full bg-border"></div>

                        {/* Contact Info - Separate Section */}
                        <div className="px-6 py-4 bg-muted/30">
                          <h3 className="font-medium text-sm text-muted-foreground uppercase tracking-wider mb-3">
                            {t("menu.contactUs")}
                          </h3>
                          <div className="p-0 rounded-lg">
                            <div className="grid grid-cols-1 gap-3 pl-1 pr-2">
                              <SheetClose asChild>
                                <Link
                                  href="tel:+380630703307"
                                  className="flex items-center group hover:bg-accent hover:text-foreground rounded-full transition-colors"
                                >
                                  <div className="w-12 h-12 rounded-full border border-border bg-background flex items-center justify-center mr-3">
                                    <Phone className="h-6 w-6 text-primary" />
                                  </div>
                                  <div>
                                    <span className="text-base font-medium group-hover:text-primary transition-colors group-hover:underline">
                                      +38 063 070 33 07
                                    </span>
                                  </div>
                                </Link>
                              </SheetClose>
                              <SheetClose asChild>
                                <Link
                                  href="mailto:hi@u-do.shop"
                                  className="flex items-center group hover:bg-accent hover:text-foreground rounded-full transition-colors"
                                >
                                  <div className="w-12 h-12 rounded-full border border-border bg-background flex items-center justify-center mr-3">
                                    <Mail className="h-6 w-6 text-primary" />
                                  </div>
                                  <div>
                                    <span className="text-base font-medium group-hover:text-primary transition-colors group-hover:underline">
                                      hi@u-do.shop
                                    </span>
                                  </div>
                                </Link>
                              </SheetClose>
                            </div>
                          </div>
                        </div>

                        {/* Copyright and Collaboration Section */}
                        <div className="px-6 py-4 bg-accent/10">
                          <div className="flex flex-col items-center text-center">
                            <div className="flex justify-center space-x-4 mb-3">
                              <SheetClose asChild>
                                <Link
                                  href="/terms"
                                  className="text-muted-foreground hover:text-primary transition-colors group"
                                >
                                  <span className="group-hover:underline">
                                    –£–º–æ–≤–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
                                  </span>
                                </Link>
                              </SheetClose>
                              <SheetClose asChild>
                                <Link
                                  href="/contact"
                                  className="text-muted-foreground hover:text-primary transition-colors group"
                                >
                                  <span className="group-hover:underline">
                                    –ó–≤ º—è–∂—ñ—Ç—å—Å—è –∑ –Ω–∞–º–∏
                                  </span>
                                </Link>
                              </SheetClose>
                            </div>
                            <div className="text-muted-foreground text-xs">
                              ¬© 2024 U:DO. –í—Å—ñ –ø—Ä–∞–≤–∞ –∑–∞—Ö–∏—â–µ–Ω—ñ
                            </div>
                            <div className="text-muted-foreground text-xs mt-1">
                              –ó–∞–≤–∂–¥–∏ –≤—ñ–¥–∫—Ä–∏—Ç—ñ –¥–æ —Å–ø—ñ–≤–ø—Ä–∞—Ü—ñ!
                            </div>
                          </div>
                        </div>
                      </>
                    )}

                    {/* Full width divider */}
                    <div className="h-px w-full bg-border"></div>

                    {/* Admin Section - Only show for admin users */}
                    {isAdmin && (
                      <div className="px-6 py-4 bg-accent/10">
                        <h3 className="font-medium text-sm text-muted-foreground uppercase tracking-wider mb-3">
                          {t("menu.admin")}
                        </h3>
                        <nav className="grid grid-cols-1 gap-1 pl-1 pr-2">
                          {navItems.slice(0, 5).map((item) => (
                            <SheetClose key={item.href} asChild>
                              <Link
                                href={item.href}
                                className={cn(
                                  "flex items-center p-3 rounded-full transition-colors group",
                                  isActive(item.href)
                                    ? "bg-accent text-foreground font-medium"
                                    : "hover:bg-accent hover:text-foreground text-muted-foreground"
                                )}
                              >
                                <item.icon className="h-5 w-5 mr-3 text-primary group-hover:scale-110 transition-transform" />
                                <span className="group-hover:underline">
                                  {item.label}
                                </span>
                                {isActive(item.href) && (
                                  <div className="ml-auto w-2 h-2 rounded-full bg-primary" />
                                )}
                              </Link>
                            </SheetClose>
                          ))}
                        </nav>
                      </div>
                    )}
                  </div>

                  {/* Minimalistic Footer with Language/Currency */}
                  <div className="border-t bg-muted/30 py-4 px-6">
                    <div className="grid grid-cols-2 gap-4">
                      <div className="flex flex-col space-y-2">
                        <h3 className="font-medium text-sm text-muted-foreground uppercase tracking-wider mb-1">
                          {t("menu.language")}
                        </h3>
                        <Select
                          value={locale}
                          onValueChange={(value) =>
                            handleLanguageChange(value as Locale)
                          }
                        >
                          <SelectTrigger className="w-full h-10 text-sm">
                            <span className="flex items-center">
                              <span className="mr-2">
                                {
                                  languages.find((l) => l.code === locale)
                                    ?.emoji
                                }
                              </span>
                              {languages.find((l) => l.code === locale)?.name}
                            </span>
                          </SelectTrigger>
                          <SelectContent>
                            {languages.map((lang) => (
                              <SelectItem key={lang.code} value={lang.code}>
                                <span className="flex items-center">
                                  <span className="mr-2">{lang.emoji}</span>
                                  {lang.name}
                                </span>
                              </SelectItem>
                            ))}
                          </SelectContent>
                        </Select>
                      </div>

                      <div className="flex flex-col space-y-2">
                        <h3 className="font-medium text-sm text-muted-foreground uppercase tracking-wider mb-1">
                          {t("menu.currency")}
                        </h3>
                        <Select
                          value={currency}
                          onValueChange={(value) =>
                            handleCurrencyChange(value as Currency)
                          }
                        >
                          <SelectTrigger className="w-full h-10 text-sm">
                            <span className="flex items-center">
                              <span className="mr-2 font-bold">
                                {
                                  currencies.find((c) => c.code === currency)
                                    ?.symbol
                                }
                              </span>
                              {
                                currencies.find((c) => c.code === currency)
                                  ?.name
                              }
                            </span>
                          </SelectTrigger>
                          <SelectContent>
                            {currencies.map((curr) => (
                              <SelectItem key={curr.code} value={curr.code}>
                                <span className="flex items-center">
                                  <span className="mr-2 font-bold">
                                    {curr.symbol}
                                  </span>
                                  {curr.name}
                                </span>
                              </SelectItem>
                            ))}
                          </SelectContent>
                        </Select>
                      </div>
                    </div>
                  </div>
                </div>
              </SheetContent>
            </Sheet>
          </div>
        </div>
      </div>
    </header>
  );
}
